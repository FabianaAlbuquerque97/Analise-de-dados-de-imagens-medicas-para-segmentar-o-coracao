# -*- coding: utf-8 -*-
"""ConversãoNiiPng.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X-z4APL0Iyv1AXWiCnxMnQ_0KcDjm-Rg

#Conexão google drive
"""

from google.colab import drive

drive.mount('/content/drive')

"""#Bibliotecas"""

# Commented out IPython magic to ensure Python compatibility.
# For saving data in JPG format
!pip install pillow

# For viewing medical images
!pip3 install medpy

# To view tridimentional images in different angles
!pip install SimpleITK

# To convert images from .nii to .jpg
!pip3 install med2image

# General module for color support
!pip install pfmisc

!pip install nibabel numpy Pillow

!pip install pydrive pillow


# %matplotlib inline

import pandas as pd
import tensorflow.compat.v1 as tf
from tensorflow import keras
import numpy as np
import PIL
from PIL import Image
from medpy.io import load
import SimpleITK as sitk
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import med2image as med2image

import os

"""#Leitura e conversão"""

import nibabel as nib
import numpy as np
from PIL import Image
import os

array = ['la_003.nii','la_004.nii','la_005.nii','la_007.nii','la_009.nii','la_010.nii','la_011.nii','la_014.nii','la_016.nii','la_017.nii','la_018.nii','la_019.nii','la_020.nii',
         'la_021.nii','la_022.nii','la_023.nii','la_024.nii','la_026.nii','la_029.nii','la_030.nii',]
index = 0
print(array[index])
while index < len(array):

  #1 leitura
  # Definir o caminho para o arquivo NIfTI e para a pasta de destino no Google Drive
  nii_file_path = '/content/drive/MyDrive/TESTE.PBIC/PIBIC/ImagesTr/'+(array[index])
  #output_folder = '/content/drive/MyDrive/TESTE.PBIC/PIBIC/'+(base_name)


  # Carregar o arquivo NIfTI
  nii_img = nib.load(nii_file_path)
  nii_data = nii_img.get_fdata()

  # Obter o nome do arquivo sem a extensão
  base_name = os.path.basename(nii_file_path).split('.')[0]
  #print(base_name)
  # Verificar as dimensões do arquivo NIfTI
  #print("Dimensões do arquivo NIfTI:", nii_data.shape)
  output_folder = '/content/drive/MyDrive/TESTE.PBIC/PIBIC/'+(base_name)
  if not os.path.exists(output_folder):
        os.makedirs(output_folder)

  # Definir o número de fatias que você deseja extrair (ajuste conforme necessário)
  # por exemplo, usar todas as fatias
  num_slices = nii_data.shape[2]
  # Se você quiser um número específico de fatias, ajuste aqui:
  # num_slices = 10  # por exemplo, se você quiser apenas 10 fatias

  # Certifique-se de que a pasta de destino existe
  os.makedirs(output_folder, exist_ok=True)

  #2 conversão
  # Iterar pelas fatias e salvar cada uma como PNG
  for i in range(num_slices):
    slice_data = nii_data[:, :, i]

    # Normalizar a fatia para o intervalo [0, 255]
    slice_data = 255 * (slice_data - np.min(slice_data)) / (np.max(slice_data) - np.min(slice_data))
    slice_data = slice_data.astype(np.uint8)

    # Criar a imagem
    img = Image.fromarray(slice_data)

    # Salvar a imagem como PNG
    img.save(os.path.join(output_folder, f"{base_name}_slice_{i}.png"))

  # girar a imagem

  image_folder_path = '/content/drive/MyDrive/TESTE.PBIC/PIBIC/'+(base_name)

  # Função para rodar uma imagem
  def rotate_image(image_path, angle=90):
    with Image.open(image_path) as img:
        rotated_img = img.rotate(angle, expand=True)
        return rotated_img

  # Processar todas as imagens na pasta
  for image_name in os.listdir(image_folder_path):
    if image_name.endswith(('.png', '.jpg', '.jpeg')):
        image_path = os.path.join(image_folder_path, image_name)

        # Rodar a imagem
        rotated_img = rotate_image(image_path, angle=90)

        # Salvar a imagem rotacionada de volta na mesma pasta
        rotated_img.save(image_path)

  index += 1